---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { existsSync, readFileSync } from 'fs';
import { resolve } from 'path';
import { parse } from 'yaml';

export async function getStaticPaths() {
  const fs = await import('fs');
  const dataDir = resolve(process.cwd(), '../data');
  
  if (!existsSync(dataDir)) return [];
  
  const files = fs.readdirSync(dataDir).filter(file => file.endsWith('.yaml'));
  
  return files.map(file => ({
    params: { slug: file.replace('.yaml', '') },
  }));
}

const { slug } = Astro.params;
const dataDir = resolve(process.cwd(), '../data');
const filePath = resolve(dataDir, `${slug}.yaml`);

let game = null;
if (existsSync(filePath)) {
  try {
    const content = readFileSync(filePath, 'utf-8');
    game = parse(content);
  } catch (error) {
    console.warn(`Error parsing ${slug}.yaml:`, error);
  }
}

if (!game) {
  return Astro.redirect('/404');
}
---

<BaseLayout title={game.name} description={game.description}>
  <div class="terminal-box max-w-4xl mx-auto">
    <header class="mb-6">
      <div class="ascii-art text-terminal-amber mb-4">
┌─ {game.name?.toUpperCase() || 'GAME'} ─┐
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 terminal-border p-4">
        <div class="md:col-span-2">
          <h1 class="text-2xl font-bold mb-2 text-terminal-white">
            {game.name}
          </h1>
          
          <div class="text-terminal-gray mb-4">
            {game.classification?.primary_type && (
              <span class="text-terminal-green terminal-border px-2 py-1 mr-2">
                [{game.classification.primary_type.toUpperCase()}]
              </span>
            )}
            {game.developers && game.developers.length > 0 && (
              <span>by {game.developers.join(', ')}</span>
            )}
          </div>
          
          <p class="text-terminal-white leading-relaxed">
            {game.description}
          </p>
        </div>
        
        <div class="text-terminal-gray">
          <div class="ascii-art">
┌─ INFO ─┐
          </div>
          
          {game.release_date && (
            <div class="mb-2">
              <span class="text-terminal-amber">Released:</span> {game.release_date}
            </div>
          )}
          
          {game.latest_version && (
            <div class="mb-2">
              <span class="text-terminal-amber">Version:</span> {game.latest_version}
            </div>
          )}
          
          {game.classification?.difficulty && (
            <div class="mb-2">
              <span class="text-terminal-amber">Difficulty:</span> 
              <span class={`ml-1 ${
                game.classification.difficulty === 'extreme' ? 'text-terminal-red' :
                game.classification.difficulty === 'hard' ? 'text-orange-400' :
                game.classification.difficulty === 'moderate' ? 'text-terminal-yellow' :
                'text-terminal-green'
              }`}>
                {game.classification.difficulty.toUpperCase()}
              </span>
            </div>
          )}
          
          {game.platforms && (
            <div class="mb-2">
              <span class="text-terminal-amber">Platforms:</span>
              <div class="ml-2 text-sm">
                {game.platforms.slice(0, 5).join(' • ')}
                {game.platforms.length > 5 && <span class="text-terminal-gray"> +{game.platforms.length - 5} more</span>}
              </div>
            </div>
          )}
        </div>
      </div>
    </header>

    {game.lineage && (
      <section class="mb-6">
        <h2 class="text-xl font-bold mb-3 text-terminal-amber">
          ┌─ LINEAGE ─┐
        </h2>
        <div class="terminal-border p-4">
          {game.lineage.forked_from && (
            <div class="mb-2">
              <span class="text-terminal-green">Forked from:</span> 
              <a href={`/games/${game.lineage.forked_from}`} class="text-terminal-white hover:text-terminal-amber ml-1">
                {game.lineage.forked_from}
              </a>
            </div>
          )}
          
          {game.lineage.parent_games && game.lineage.parent_games.length > 0 && (
            <div class="mb-2">
              <span class="text-terminal-green">Influences:</span>
              <div class="ml-2">
                {game.lineage.parent_games.map((parent: string, i: number) => (
                  <span>
                    <a href={`/games/${parent}`} class="text-terminal-white hover:text-terminal-amber">
                      {parent}
                    </a>
                    {i < game.lineage.parent_games.length - 1 && ' → '}
                  </span>
                ))}
              </div>
            </div>
          )}
          
          {game.lineage.notable_forks && game.lineage.notable_forks.length > 0 && (
            <div class="mb-2">
              <span class="text-terminal-green">Notable Forks:</span>
              <div class="ml-2 flex flex-wrap gap-2">
                {game.lineage.notable_forks.map((fork: string) => (
                  <a href={`/games/${fork}`} 
                     class="text-terminal-white hover:text-terminal-amber terminal-border px-2 py-1 text-sm">
                    {fork}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      </section>
    )}

    {game.classification?.gameplay_features && (
      <section class="mb-6">
        <h2 class="text-xl font-bold mb-3 text-terminal-amber">
          ┌─ FEATURES ─┐
        </h2>
        <div class="terminal-border p-4">
          <div class="grid grid-cols-2 md:grid-cols-3 gap-2">
            {game.classification.gameplay_features.map((feature: string) => (
              <div class="text-terminal-white text-sm">
                ■ {feature.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
              </div>
            ))}
          </div>
        </div>
      </section>
    )}

    {game.links && (
      <section class="mb-6">
        <h2 class="text-xl font-bold mb-3 text-terminal-amber">
          ┌─ LINKS ─┐
        </h2>
        <div class="terminal-border p-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
            {Object.entries(game.links).map(([key, url]) => (
              <a href={url as string} target="_blank" rel="noopener noreferrer"
                 class="text-terminal-white hover:text-terminal-amber flex items-center">
                ► {key.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
              </a>
            ))}
          </div>
        </div>
      </section>
    )}

    <footer class="terminal-border-t pt-4 text-center text-terminal-gray text-sm">
      <div class="ascii-art">
┌─ END OF ENTRY ─┐
      </div>
      {game.last_updated && (
        <div>Last updated: {game.last_updated}</div>
      )}
    </footer>
  </div>
</BaseLayout>

<style>
  .terminal-border {
    border: 1px solid #808080;
  }
  .terminal-border-t {
    border-top: 1px solid #808080;
  }
  .terminal-border:hover {
    border-color: #FFFFFF;
  }
</style>